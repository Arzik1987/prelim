norm.prim <- function(dtrain, dtest = NULL, deval = dtrain, box, minpts = 20, max.peels = 999,
peel.alpha = 0.05, pasting = FALSE, paste.alpha = 0.01, threshold = 1,
seed = 2020){
time1 = Sys.time()
if(length(peel.alpha) > 1){
peel.alpha <- select.alpha(dtrain = dtrain, box = box, minpts = minpts,
max.peels = max.peels, peel.alpha = peel.alpha,
threshold = threshold, seed = seed)
}
peel <- function(){
hgh <- -Inf
bnd <- -Inf
vol.red <- 1
for(i in 1:ncol(x)){
bound <- quantile(x[, i], peel.alpha, type = 8)
vol.r <- (bound - box[1, i])/(box[2, i] - box[1, i])
retain <- (x[, i] > bound)                                   # this inequality implicitly assumes low (< peel.alpha) share of duplicates for each value
if(sum(retain)){
tar <- sum(y[retain])/sum(retain)
if(tar > hgh | (tar == hgh & vol.r < vol.red)){
hgh <- tar
vol.red <- vol.r
inds <- retain
rn = 1
cn = i
bnd = bound
}
}
bound <- quantile(x[, i], 1 - peel.alpha, type = 8)
vol.r <- (box[2, i] - bound)/(box[2, i] - box[1, i])
retain <- (x[, i] < bound)
if(sum(retain)){
tar <- sum(y[retain])/sum(retain)
if(tar > hgh | (tar == hgh & vol.r < vol.red)){
vol.red <- vol.r
hgh <- tar
inds <- retain
rn = 2
cn = i
bnd = bound
}
}
}
if(hgh == -Inf){
continue.peeling <<- FALSE
} else {
x <<- x[inds,, drop = FALSE]
y <<- y[inds]
box[rn, cn] <<- bnd
continue.peeling <<- (hgh < threshold)
}
}
qual.pr <- function(d, box.p){
Np = sum(d[[2]])
retain <- rep(TRUE, length(d[[2]]))
for(i in 1:ncol(d[[1]])){
retain <- retain & d[[1]][, i] > box.p[1, i]
retain <- retain & d[[1]][, i] < box.p[2, i]
}
n = length(d[[2]][retain])
np = sum(d[[2]][retain])
rec <- np/Np
pr <- np/n
c(rec, pr, sum(retain))
}
x <- dtrain[[1]]
y <- dtrain[[2]]
continue.peeling <- TRUE
neval <- nrow(deval[[1]])
i = 0
boxes <- list()
box.p <- box
q <- qtest <- matrix(ncol = 2, nrow = 0)
while(length(y) >= minpts & neval >= minpts & continue.peeling & i <= max.peels){
temp <- qual.pr(deval, box.p)
neval <- temp[3]
q <- rbind(q, temp[1:2])
i <- i + 1
boxes <- append(boxes, list(box.p))
peel()
box.p <- box
# pasting step (use prim package)
if(pasting){
res.p <- list(x = x, y = y, box = box)
while (!is.null(res.p)){
box.p <- res.p$box
res.p <- prim:::paste.one(x = res.p$x, y = res.p$y, box = res.p$box,
x.init = dtrain[[1]], y.init = dtrain[[2]], paste.alpha = paste.alpha,
mass.min = 0, threshold = 0, d = ncol(dtrain[[1]]), n = 1,
y.fun = mean, verbose = FALSE)
}
}
# end of pasting
}
ret <- which(q[, 2] == max(q[, 2]))[1]
q <- matrix(q[1:ret,], ncol = 2)
boxes <- boxes[1:ret]
time.train = Sys.time() - time1
if(!is.null(dtest)){
for(i in boxes){
qtest <- rbind(qtest, qual.pr(dtest, i)[1:2])
}
}
return(list(pr.test = qtest, pr.eval = q, boxes = boxes,
peel.alpha = peel.alpha, time.train = time.train))
}
dx = matrix(runif(400000), ncol = 4)
dy = (apply((dx > 0.3), 1, sum) == 4) - 0
box = matrix(c(rep(0, 4), rep(1, 4)), ncol = 4, byrow = TRUE)
dtrain <- list(dx, dy)
start = Sys.time()
bp = norm.prim(dtrain = dtrain, box = box)
end = Sys.time()
print(end - start) # ~2.8s
dx = matrix(runif(400000), ncol = 4)
dy = (apply((dx > 0.3), 1, sum) == 4) - 0
box = matrix(c(rep(0, 4), rep(1, 4)), ncol = 4, byrow = TRUE)
dtrain <- list(dx, dy)
start = Sys.time()
bp = norm.prim(dtrain = dtrain, box = box)
end = Sys.time()
print(end - start) # ~2.8s
dx = matrix(runif(400000), ncol = 4)
dy = (apply((dx > 0.3), 1, sum) == 4) - 0
box = matrix(c(rep(0, 4), rep(1, 4)), ncol = 4, byrow = TRUE)
dtrain <- list(dx, dy)
start = Sys.time()
bp = norm.prim(dtrain = dtrain, box = box)
end = Sys.time()
print(end - start) # ~2.8s
dx = matrix(runif(400000), ncol = 4)
dy = (apply((dx > 0.3), 1, sum) == 4) - 0
box = matrix(c(rep(0, 4), rep(1, 4)), ncol = 4, byrow = TRUE)
dtrain <- list(dx, dy)
start = Sys.time()
bp = norm.prim(dtrain = dtrain, box = box)
end = Sys.time()
print(end - start) # ~2.8s
dx = matrix(runif(400000), ncol = 4)
dy = (apply((dx > 0.3), 1, sum) == 4) - 0
box = matrix(c(rep(0, 4), rep(1, 4)), ncol = 4, byrow = TRUE)
dtrain <- list(dx, dy)
start = Sys.time()
bp = norm.prim(dtrain = dtrain, box = box)
end = Sys.time()
print(end - start) # ~2.8s
dx = matrix(runif(400000), ncol = 4)
dy = (apply((dx > 0.3), 1, sum) == 4) - 0
box = matrix(c(rep(0, 4), rep(1, 4)), ncol = 4, byrow = TRUE)
dtrain <- list(dx, dy)
start = Sys.time()
bp = norm.prim(dtrain = dtrain, box = box)
end = Sys.time()
print(end - start) # ~2.8s
dx = matrix(runif(400000), ncol = 4)
dy = (apply((dx > 0.3), 1, sum) == 4) - 0
box = matrix(c(rep(0, 4), rep(1, 4)), ncol = 4, byrow = TRUE)
dtrain <- list(dx, dy)
start = Sys.time()
bp = norm.prim(dtrain = dtrain, box = box)
end = Sys.time()
print(end - start) # ~2.8s
